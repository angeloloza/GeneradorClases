package com.cominvi.app.commons.models;

import java.io.*;
import java.util.*;

/**
 * Application identity class for: com.cominvi.app.commons.models.Dependenciaroles
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class DependenciarolesId implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("com.cominvi.app.commons.models.Dependenciaroles"); }
		catch(Exception e) {}
	}

	public long idroldependiente;
	public long idrolmaster;

	public DependenciarolesId() {
	}

	public DependenciarolesId(String str) {
		fromString(str);
	}

	public long getIdroldependiente() {
		return idroldependiente;
	}

	public void setIdroldependiente(long idroldependiente) {
		this.idroldependiente = idroldependiente;
	}

	public long getIdrolmaster() {
		return idrolmaster;
	}

	public void setIdrolmaster(long idrolmaster) {
		this.idrolmaster = idrolmaster;
	}

	public String toString() {
		return String.valueOf(idroldependiente)
			+ "::" + String.valueOf(idrolmaster);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + (int) (idroldependiente ^ (idroldependiente >>> 32));
		rs = rs * 37 + (int) (idrolmaster ^ (idrolmaster >>> 32));
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		DependenciarolesId other = (DependenciarolesId) obj;
		return (idroldependiente == other.idroldependiente)
			&& (idrolmaster == other.idrolmaster);
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		idroldependiente = Long.parseLong(str);
		str = toke.nextToken();
		idrolmaster = Long.parseLong(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}